

### **Task 3: Data Cleaning**

1. **Handle missing values**: Drop rows with missing values from the dataset.
   - Use `.na.drop()` to remove rows containing `null` values.
   - Verify if there are any null values left using `.filter()`.

   Example:
   ```python
   df_cleaned = df.na.drop()
   df_cleaned.show()
   ```

2. **Filter rows**: Create a filtered DataFrame where arrival delays are greater than `0`.
   
   Example:
   ```python
   df_filtered = df.filter(df['ARR_DELAY'] > 0)
   df_filtered.show()
   ```

---

### **Task 4: Aggregating and Summarizing the Data**

1. **Find the average arrival delay by airline**:
   - Group by `CARRIER` and calculate the average of `ARR_DELAY`.

   Example:
   ```python
   df.groupBy("CARRIER").agg({"ARR_DELAY": "avg"}).show()
   ```

2. **Count the number of flights per airline**:
   - Group by `CARRIER` and count the total number of flights.

   Example:
   ```python
   df.groupBy("CARRIER").count().show()
   ```

3. **Find the minimum and maximum delay** for all flights:
   - Use `.agg()` to calculate both the minimum and maximum delay.

   Example:
   ```python
   df.agg({"ARR_DELAY": "min", "ARR_DELAY": "max"}).show()
   ```

---

### **Task 5: Visualizing the Data**

1. **Plot the average delay per airline** using Databricksâ€™ built-in visualization tools:
   - Use `display()` to visualize the result from the average delay aggregation.

   Example:
   ```python
   display(df.groupBy("CARRIER").agg({"ARR_DELAY": "avg"}))
   ```

2. **Visualize flight count by airline** using a bar chart:
   - Use the `display()` function and convert the table into a bar chart in the UI.

   Example:
   ```python
   display(df.groupBy("CARRIER").count())
   ```

3. **Plot the distribution of arrival delays** using a histogram:
   - Group by `ARR_DELAY` and count, then use the Databricks visualization tool to create a histogram.

   Example:
   ```python
   display(df.groupBy("ARR_DELAY").count())
   ```

---
